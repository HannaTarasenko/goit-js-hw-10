{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["// Описаний в документації\nimport flatpickr from \"flatpickr\";\n// Додатковий імпорт стилів\nimport \"flatpickr/dist/flatpickr.min.css\";\n// Описаний у документації\nimport iziToast from \"izitoast\";\n// Додатковий імпорт стилів\nimport \"izitoast/dist/css/iziToast.min.css\";\nconst timeInput = document.querySelector('#datetime-picker');\nconst startButton = document.querySelector('button[data-start]');\nconst dayBlock = document.querySelector('[data-days]');\nconst hoursBlock = document.querySelector('[data-hours]');\nconst minutesBlock = document.querySelector('[data-minutes]');\nconst secondsBlock = document.querySelector('[data-seconds]');\n\nlet userSelectedDate;\nlet intervalID;\n\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n        const selectedDate = selectedDates[0];\n        if (selectedDate <= new Date()) {\n            iziToast.error({ title: 'Error', message: 'Please choose a date in the future' });\n            startButton.disabled = true;\n        } else {\n            userSelectedDate = selectedDate;\n            startButton.disabled = false;\n        }\n    }\n};\nflatpickr(timeInput, options);\n\nstartButton.addEventListener('click', () => {\n    if (!userSelectedDate) return;\n    startButton.disabled = true;\n    timeInput.disabled = true;\n\n    intervalID = setInterval(() => {\n        const currentTime = new Date();\n        const diff = userSelectedDate - currentTime;\n\n        if (diff <= 0) {\n            clearInterval(intervalID);\n            updateTimeBlocks({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n            timeInput.disabled = false;\n            return;\n        }\n\n        const time = convertMs(diff);\n        updateTimeBlocks(time);\n    }, 1000);\n});\n\n\n\n// startButton.addEventListener('click', () => {\n//     const initTime = Date.now();\n\n//     intervalID = setInterval(() => {\n//         const currentTime = Date.now();\n//         const diff = currentTime - initTime;\n//         const time = convertMs(diff);\n//         updateTimeBlocks(time);\n//     },1000);\n//     startButton.disabled = true;\n\n// });\n\n// function convertMs(ms) {\n//     // Number of milliseconds per unit of time\n//     const second = 1000;\n//     const minute = second * 60;\n//     const hour = minute * 60;\n//     const day = hour * 24;\n  \n//     // Remaining days\n//     const days = Math.floor(ms / day);\n//     // Remaining hours\n//     const hours = Math.floor((ms % day) / hour);\n//     // Remaining minutes\n//     const minutes = Math.floor(((ms % day) % hour) / minute);\n//     // Remaining seconds\n//     const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n  \n//     return { days, hours, minutes, seconds };\n// }\n  \n// function updateTimeBlocks({ days, hours, minutes, seconds }) {\n//     dayBlock.textContent = String(days).padStart(2, '0');\n//     hoursBlock.textContent = String(hours).padStart(2, '0');\n//     minutesBlock.textContent = String(minutes).padStart(2, '0');\n//     secondsBlock.textContent = String(seconds).padStart(2, '0');\n// }"],"names":["timeInput","startButton","userSelectedDate","intervalID","options","selectedDates","selectedDate","iziToast","flatpickr","diff","time"],"mappings":"0IAQA,MAAMA,EAAY,SAAS,cAAc,kBAAkB,EACrDC,EAAc,SAAS,cAAc,oBAAoB,EAC9C,SAAS,cAAc,aAAa,EAClC,SAAS,cAAc,cAAc,EACnC,SAAS,cAAc,gBAAgB,EACvC,SAAS,cAAc,gBAAgB,EAE5D,IAAIC,EACAC,EAEJ,MAAMC,EAAU,CACZ,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACnB,MAAMC,EAAeD,EAAc,CAAC,EAChCC,GAAgB,IAAI,MACpBC,EAAS,MAAM,CAAE,MAAO,QAAS,QAAS,oCAAoC,CAAE,EAChFN,EAAY,SAAW,KAEvBC,EAAmBI,EACnBL,EAAY,SAAW,GAE9B,CACL,EACAO,EAAUR,EAAWI,CAAO,EAE5BH,EAAY,iBAAiB,QAAS,IAAM,CACnCC,IACLD,EAAY,SAAW,GACvBD,EAAU,SAAW,GAErBG,EAAa,YAAY,IAAM,CAE3B,MAAMM,EAAOP,EADO,IAAI,KAGxB,GAAIO,GAAQ,EAAG,CACX,cAAcN,CAAU,EACxB,iBAAiB,CAAE,KAAM,EAAG,MAAO,EAAG,QAAS,EAAG,QAAS,CAAC,CAAE,EAC9DH,EAAU,SAAW,GACrB,MACH,CAED,MAAMU,EAAO,UAAUD,CAAI,EAC3B,iBAAiBC,CAAI,CACxB,EAAE,GAAI,EACX,CAAC"}